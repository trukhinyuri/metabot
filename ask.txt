### Цель проекта
Разработать торгового бота для биржи KuCoin, специализирующегося на кросс-маржинальной торговле с USDT в качестве базовой валюты. Бот должен быть способен достигать ежедневной прибыли более 100% (на первоначальном этапе — 10–20% с постепенным увеличением агрессивности), торговать как длинными, так и короткими позициями, мгновенно реагировать на изменения рынка и использовать алгоритмы искусственного интеллекта и машинного обучения, аналогичные тем, что применяют ведущие хедж-фонды 2025-го года.
### Основные задачи и этапы доработки
1. **Исправление запуска и базовая интеграция**
    - **Точка входа:**
        - Провести анализ файлов и для обеспечения корректного запуска проекта. `main.py`

    - **Логирование и мониторинг:**
        - Обеспечить подробное логирование всех операций (подключение к API, обработка данных, выполнение ордеров) с использованием, например, `TimedRotatingFileHandler`, чтобы отслеживать каждое действие бота.

2. **Интеграция с KuCoin API**
    - **Получение рыночных данных и Kucoin Universal SDK
        - Реализовать подключение к https://github.com/Kucoin/kucoin-universal-sdk KuCoin для подписки на каналы тикеров и стаканов ордеров, что обеспечит низкую задержку обработки данных.

    - **Управление ордерами через REST API:**
        - Реализовать функции выставления, модификации и отмены ордеров (рыночных и лимитированных), включая возможность установления условных ордеров (stop-loss, take-profit).

    - **Мониторинг аккаунта:**
        - Добавить периодический вызов конечной точки для контроля маржинального баланса, получения информации о суммарном капитале, задолженности и соотношении маржи. `/api/v1/margin/account`

3. **Реализация торговой стратегии**
    - **HFT и многопоточность:**
        - Внедрить высокочастотный торговый (HFT) механизм, способный исполнять сотни сделок в минуту посредством использования данных WebSocket. Приоритет должен быть отдан рыночным ордерам, даже с допуском незначительного проскальзывания.

    - **AI и ML для прогнозирования:**
        - Реализовать систему на основе Reinforcement Learning (например, Deep Q-Network) для обучения торговых сигналов (buy, sell, hold) с использованием входных данных: изменения цены, объем, дисбаланс стакана, технические индикаторы (RSI, MACD).
        - Организовать мультиагентную систему, где:
            - **Momentum Agent** торгует по краткосрочным трендам (например, изменение цены за минуту — > 1%).
            - **Volatility Breakout Agent** входит в позицию при преодолении уровня последних максимумов/минимумов.
            - **Statistical Arbitrage Agent** использует корреляционные расхождения (например, между BTC/USDT и ETH/USDT).

        - Включить метамодель (например, на базе LightGBM), которая будет выбирать оптимального агента в зависимости от рыночных условий (волатильность, объем, сила тренда) с периодическим онлайн-обучением.

4. **Управление рисками**
    - **Динамическое управление стоп-лоссами и тейк-профит:**
        - Реализовать установку уровней на основе волатильности активов (например, стоп-лосс на 2x ниже точки входа, тейк-профит – на 3x выше точки входа), с их динамической корректировкой по мере изменения рыночных условий.

    - **Размер позиции:**
        - Применить методику расчёта размера позиции (например, размер = (процент риска от капитала) / (расстояние до стоп-лосса)), начиная с риска 1–2% от капитала с возможным ростом до 5%.

    - **Диверсификация и мониторинг маржи:**
        - Торговать 3–5 высоковолатильными парами (BTC/USDT, ETH/USDT, XRP/USDT) с динамическим распределением капитала.
        - Постоянно мониторить соотношение маржи, устанавливая таргет выше 300% и механизмы по снижению позиций при падении ниже 200 или 150%.

5. **Реальное время и оптимизация стратегии**
    - **Анализ данных и оптимизация:**
        - Обрабатывать входящие данные WebSocket для вычисления скользящих статистик (волатильность, объем) в режиме реального времени.
        - Регулировать параметры торговой стратегии (расстояние до стоп-лосса, размер позиций и веса стратегий) в зависимости от текущей волатильности.

    - **Эволюционные алгоритмы:**
        - Использовать генетические алгоритмы (например, с использованием библиотеки deap) для оптимизации параметров (MA, RSI-порогов) на основе исторических данных, запуская оптимизацию в фоне.

    - **Обратная связь в модели RL:**
        - Интегрировать результаты торгов для онлайн-обновления модели RL, чтобы обеспечить непрерывное обучение и адаптацию стратегии.

6. **Документация и удобство использования**
    - **Пользовательская документация:**
        - Создать подробный README с инструкциями по установке, настройке (например, где и как задать API-ключи, режим работы бота, параметры стратегии), запуску (CLI команды, аргументы для переключения между тестовым и реальным режимами) и мониторингу работы бота.

    - **Образцы запуска и тестирования:**
        - Добавить примеры выполнения торговых операций, а также подробное описание логов и визуальных метрик, таких как дневная доходность, Sharpe Ratio и максимальная просадка.

    - **Тестовое покрытие:**
        - Настроить базовые unit-тесты для функций (извлечение признаков, обработка ордеров, подключение к API), а также интеграционные тесты, чтобы убедиться в корректной работе всех модулей бота.

7. **Производительность, безопасность и соответствие требованиям**
    - **Высокая производительность:**
        - Использовать asyncio для асинхронных вызовов к API и WebSocket, а также параллельную обработку данных (multiprocessing) для оценки работы нескольких агентов одновременно.
        - При наличии GPU оптимизировать выводы моделей с помощью TensorRT или других инструментов ускорения.

    - **Безопасность:**
        - Защитить конфигурацию () посредством шифрования (AES-256) и безопасного хранения ключей в переменных окружения. `config.json`
        - Реализовать базовую отчетность (ежедневные сводки прибыли/убытка) в соответствии с положениями, аналогичными требованиям европейских хедж-фондов.

    - **Соблюдение ограничений API:**
        - Реализовать очередь запросов и обработку ошибок с экспоненциальным бэкофом для предотвращения превышения лимитов KuCoin (например, 10 запросов в секунду).

### Итоговый результат
После выполнения всех доработок торговый бот должен:
- Корректно подключаться к KuCoin.
- В режиме HFT с использованием срочных данных WebSocket оперативно обрабатывать рыночные данные.
- Применять мультиагентную торговую стратегию на базе AI/ML, способную генерировать торговые сигналы и выполнять ордера для длинных и коротких позиций.
- Управлять рисками с помощью динамических стоп-лоссов, тейк-профита, оптимального размера позиции и непрерывного мониторинга маржи.
- Проводить оптимизацию стратегии в режиме реального времени посредством генетических алгоритмов и обратной связи для RL модели.
- Предоставлять подробное логирование и отчёты с метриками торгов (доходность, Sharpe Ratio, просадка).
- Иметь понятную, подробную документацию по установке, настройке и эксплуатации.

